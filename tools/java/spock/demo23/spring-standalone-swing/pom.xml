<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.manning.spock</groupId>
	<version>1.0</version>
	<artifactId>spring-standalone-swing</artifactId>
	<packaging>jar</packaging>
	<name>Standalone Swing/Spring Project</name>

	<build>
		<plugins>

    <!-- JeremyC 17-07-2019 
	Summary of how I got this working...

	FAILED ATTEMPT #1:
	To try and package the jar, and all jar dependencies (including Spring) into a single executable jar, I first
	tried to use "maven-assembly-plugin".
	(see https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven)
   	mvn clean compile assembly:single
   	This builtds:
   	./target/spring-standalone-swing-1.0-jar-with-dependencies.jar
        !!! BUT !!!: I got the following error when I launched my jar:
		java -jar ./target/spring-standalone-swing-1.0-jar-with-dependencies.jar
		...
		INFO: Loading XML bean definitions from class path resource [spring-context.xml]
		Exception in thread "main" org.springframework.beans.factory.parsing.BeanDefinitionParsingException: 
		Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/tx]
		Offending resource: class path resource [spring-context.xml]

	FAILED ATTEMPT #2: "spring-tx" dependency
	After reading https://www.baeldung.com/unable-to-locate-spring-namespacehandler-for-xml-schema-namespace 
	I explicitly added a dependency for "spring-tx" dependencies - see section below in this file.
	However, this did not resolve the problem :-(

	FAILED ATTEMPT #3: "maven-assembly-plugin"
	After reading the user comments from https://www.baeldung.com/unable-to-locate-spring-namespacehandler-for-xml-schema-namespace 
	I suspected that my cause could be the same, i.e. multiple jars having conflicting meta files. So, that then led me to try using
	"maven-shade-plugin" instead of "maven-aseembly-plugin" - see section below in this file.
	!!! BUT !!!: This still didn't resolve the problem. 

	SUCCESSFUL ATTEMPT #4: "spring-boot-maven-plugin"
        I came across "spring-boot-maven-plugin" and thought I would give it a try, particularly after finding evidence
	that it can be a spring-based executable jar to debug (see https://www.baeldung.com/spring-debugging). 
	See https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html
	To build:
	mvn package
	(This creates a xxx.jar and a xxx.jar.original)
    -->
    <!-- JeremyC. FAILED ATTEMPT #1 - using "maven-assembly-plugin"
    <plugin>
      <artifactId>maven-assembly-plugin</artifactId>
      <configuration>
        <archive>
          <manifest>
            <mainClass>com.manning.spock.warehouse.Launcher</mainClass>
          </manifest>
        </archive>
        <descriptorRefs>
          <descriptorRef>jar-with-dependencies</descriptorRef>
        </descriptorRefs>
      </configuration>
    </plugin>
    -->

    <!-- JeremyC. FAILED ATTEMPT #3 - using "maven-shade-plugin"
	After reading the user comments from https://www.baeldung.com/unable-to-locate-spring-namespacehandler-for-xml-schema-namespace 
	I suspected that my cause could be the same, i.e. multiple jars having conflicting meta files. So, that then led me to try using
	"maven-shade-plugin" instead of "maven-aseembly-plugin"
	!!! BUT !!!: This still didn't resolve the problem. 
    -->
      <!--
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.manning.spock.warehouse.Launcher</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      -->
	
    <!-- JeremyC. SUCCESSFUL ATTEMPT #4 - using "spring-boot-maven-plugin"
        I came across "spring-boot-maven-plugin" and thought I would give it a try, particularly after finding evidence
	that it can be a spring-based executable jar to debug (see https://www.baeldung.com/spring-debugging). 
	See https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html
	To build:
	mvn package
	(This creates a xxx.jar and a xxx.jar.original)
    -->
	<plugin>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-maven-plugin</artifactId>
		<version>2.1.6.RELEASE</version>
		<executions>
			<execution>
				<goals>
					<goal>repackage</goal>
				</goals>
			</execution>
		</executions>
	</plugin>
       
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<useFile>false</useFile>
					<includes>
						<include>**/*Spec.java</include>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.4.201502262128</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		<!-- Database -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.3.10.Final</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>

	<!-- JeremyC. FAILED ATTEMPT #2
		After reading https://www.baeldung.com/unable-to-locate-spring-namespacehandler-for-xml-schema-namespace 
		I explicitly added a dependency for "spring-tx" dependencies. However, this did not resolve the problem :-(
		It turns out that, with SUCCESSFUL ATTEMPT #4, this dependency below doesn't seem to be required, hence it
		is now commented-out.
	-->
		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		-->

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.2</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.210</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.6.1</version>
		</dependency>

		<!-- Integration testing -->
		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-spring</artifactId>
			<version>1.0-groovy-2.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>4.1.6.RELEASE</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-core</artifactId>
			<version>1.0-groovy-2.4</version>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- enables mocking of classes (in addition to interfaces) -->
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- enables mocking of classes without default constructor (together with 
				CGLIB) -->
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-backports-compat23</artifactId>
			<version>2.3.7</version>
		</dependency>

	</dependencies>

</project>
